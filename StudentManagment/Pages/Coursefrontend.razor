@page "/newcourse"
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<!-- Import necessary namespaces -->
@using ClassLibrarayModel
@using DataAccessLayer
@using System.Collections.Generic

<h1>Enter Course Information</h1>

<div class="student-form">
    <form>
        <input type="text" @bind="CourseName" placeholder="Course Name" required>
        <input type="text" @bind="CourseDescription" placeholder="Course Description" required>
        <input type="number" @bind="Credits" placeholder="Credits" required>
    </form>
    <div class="btn-group">
        <button @onclick="SaveCourse">Save</button>
        <button @onclick="ClearForm">Clear Form</button>
        
    </div>
</div>

@if (courses != null && courses.Count > 0)
{
    <div class="course-table">
        <h2>Available Courses</h2>
        <table>
            <thead>
                <tr>
                    <th>Course Name</th>
                    <th>Course Description</th>
                    <th>Credits</th>
                    <th></th> <!-- Empty header for Delete button column -->
                </tr>
            </thead>
            <tbody>
                @foreach (var course in courses)
                {
                    <tr>
                        <td>@course.CourseName</td>
                        <td>@course.CourseDescription</td>
                        <td>@course.Credits</td>
                        <td>
                            <button @onclick="@(async () => await DeleteCourse(course.CourseID))">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private string CourseName { get; set; }
    private string CourseDescription { get; set; }
    private int Credits { get; set; }
    private List<ModelCourses> courses;

    private async Task SaveCourse()
    {
        var courseData = new ModelCourses
            {
                CourseName = CourseName,
                CourseDescription = CourseDescription,
                Credits = Credits
            };

        try
        {
            // Call the backend function to save the course data
            await CourseDataAccess.AddCourse(courseData);

            // Data saved successfully, clear form fields or show a success message
            ClearForm();
            await LoadCourses(); // Reload courses after adding a new one
                                 // Optionally, show a success message
                                 // For example: ShowToast("Course information saved successfully!");
        }
        catch (Exception ex)
        {
            // Failed to save data, handle error (show error message, log error, etc.)
            // You may also want to display the error message to the user
            Console.WriteLine($"Error saving course data: {ex.Message}");
        }
    }

    private async Task LoadCourses()
    {
        try
        {
            // Retrieve all courses from the backend
            courses = await CourseDataAccess.ViewAllCourses();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading courses: {ex.Message}");
        }
    }

    private async Task DeleteCourse(int courseId)
    {
        try
        {
            // Call the backend function to delete the course
            await CourseDataAccess.DeleteCourse(courseId);

            // Reload courses after deletion
            await LoadCourses();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting course: {ex.Message}");
        }
    }

    private void ClearForm()
    {
        // Clear form fields
        CourseName = string.Empty;
        CourseDescription = string.Empty;
        Credits = 0;
    }

    private async Task ViewCourses()
    {
        // Load courses when the "View Courses" button is clicked
        await LoadCourses();
    }

    // Load courses when the component initializes
    protected override async Task OnInitializedAsync()
    {
        await LoadCourses();
    }
}

   <style>
    /* Style for the course table */
    .course-table {
        margin-top: 20px;
    }

        .course-table table {
            width: 100%;
            border-collapse: collapse;
        }

        .course-table th, .course-table td {
            padding: 10px;
            border: 1px solid #ddd;
        }

        .course-table th {
            background-color: #f2f2f2;
            text-align: left;
        }

        .course-table tbody tr:hover {
            background-color: #f5f5f5; /* Hover effect */
        }

        .course-table button {
            background-color: #dc3545;
            color: white;
            border: none;
            padding: 8px 12px;
            cursor: pointer;
            border-radius: 4px;
            transition: background-color 0.3s ease; /* Smooth transition */
        }

            .course-table button:hover {
                background-color: #c82333;
            }
</style>
